version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: c3_render_api/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=5000
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./c3_render_api:/app/c3_render_api
    networks:
      - c3render
    env_file:
      - c3_render_api/.env

  worker:
    build:
      context: .
      dockerfile: c3_render_worker/Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - C3_API_KEY=${C3_API_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./c3_render_worker:/app/c3_render_worker
    networks:
      - c3render
    env_file:
      - c3_render_worker/.env

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - c3render

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - c3render

networks:
  c3render:
    driver: bridge

volumes:
  redis_data:
  minio_data: 